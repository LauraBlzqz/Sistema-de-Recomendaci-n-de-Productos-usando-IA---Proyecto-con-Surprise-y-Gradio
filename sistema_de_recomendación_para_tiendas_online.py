# -*- coding: utf-8 -*-
"""Sistema de Recomendación para Tiendas Online

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11P0D3LLFkpWIN6oSo-sv8k-VxBX1cxa-
"""

# Autor: Laura Blázquez

# Librerías necesarias
import pandas as pd
import numpy as np
import gradio as gr
from surprise import SVD, Dataset, Reader
from surprise.model_selection import train_test_split
from surprise import accuracy

# Dataset reforzado para crear correlaciones reales
datos = {
    'usuario_id': [
        1, 1, 2, 2, 3, 3, 4, 4, 5, 5,
        6, 6, 7, 7, 8, 8, 9, 9, 10, 10,
        11, 11, 12, 12, 13, 13, 14, 14, 15, 15
    ],
    'producto_id': [
        101, 102, 101, 103, 101, 104, 101, 105, 101, 102,
        103, 104, 105, 101, 101, 106, 104, 105, 102, 107,
        101, 106, 107, 103, 105, 102, 106, 107, 101, 104
    ],
    'rating': [
        5, 3, 4, 2, 4, 5, 2, 3, 5, 4,
        3, 4, 2, 4, 3, 5, 2, 4, 5, 4,
        4, 4, 3, 5, 1, 2, 5, 3, 4, 3
    ]
}

# Crear un DataFrame
df = pd.DataFrame(datos)

# Usar Surprise para el sistema de recomendación
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(df[['usuario_id', 'producto_id', 'rating']], reader)

# Dividir los datos en entrenamiento y prueba
trainset, testset = train_test_split(data, test_size=0.2)

# Inicializar el modelo SVD
model = SVD()

# Entrenar el modelo
model.fit(trainset)

# Realizar predicciones sobre el conjunto de prueba
predicciones = model.test(testset)

# Evaluar la precisión del modelo
rmse = accuracy.rmse(predicciones)
print(f"RMSE: {rmse}")

# Función para recomendar productos a un usuario
def recomendar_productos(usuario_id, top_n=3):
    # Predecir las valoraciones para todos los productos
    productos = df['producto_id'].unique()

    # Predicción de la valoración del usuario para cada producto
    predicciones_usuario = [model.predict(usuario_id, producto) for producto in productos]

    # Ordenar las predicciones de mayor a menor (por valoración estimada)
    recomendaciones = sorted(predicciones_usuario, key=lambda x: x.est, reverse=True)

    # Seleccionar las top N recomendaciones
    recomendados = []
    for i, pred in enumerate(recomendaciones[:top_n]):
        recomendados.append(f"Producto {pred.iid} → Valoración estimada: {pred.est:.2f}")

    return "\n".join(recomendados)

# Crear la interfaz con Gradio
def interfaz_gradio(usuario_id):
    # Manejar el caso de un nombre (texto)
    try:
        usuario_id = int(usuario_id)  # Intentar convertir a número
    except ValueError:
        # Si el valor no es numérico, manejar el error
        return "Por favor, introduce un ID de usuario válido (número)."

    recomendaciones = recomendar_productos(usuario_id)
    return recomendaciones

# Crear la interfaz interactiva de Gradio
interface = gr.Interface(fn=interfaz_gradio,
                         inputs=gr.Textbox(label="Introduce tu usuario ID", type="text"),
                         outputs="text",
                         live=True,
                         title="Sistema de Recomendación de Productos",
                         description="Introduce tu ID de usuario para obtener recomendaciones de productos basadas en tus valoraciones previas.")

# Lanzar la interfaz
interface.launch()